name: CI

on:
  workflow_call:
  pull_request:
  push:

defaults:
  run:
    shell: bash

env:
  RELEASE: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/test-v') }}
  # The test-installer job can use an old existing image rather than the most
  # recently built image; the 'needs' can be commented out to allow the
  # test-installer job to run independently (and therefore faster)
  INSTALLER_USE_OLD_IMAGE: false
  INSTALLER_OLD_RUNID: 3204825457
  # The test-installer job can run with the pyinstaller debug bundle
  INSTALLER_USE_DEBUG: false

jobs:
  matrix:
    name: Generate test matrix

    #if: false    # uncomment to prevent the rest of the workflow running

    runs-on: ubuntu-latest

    # Stop existing workflows for matching branches and pull requests
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true

    outputs:
      matrix-json: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - uses: actions/checkout@v4
      - id: set-matrix
        run: python .github/workflows/matrix.py >> $GITHUB_OUTPUT


  builddeps:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        package: [
          ["sasdata", "git+https://github.com/SasView/sasdata.git@sasdata_0.10.0"],
          ["sasmodels", "git+https://github.com/SasView/sasmodels.git@sasmodels_1.0.10"]
        ]

    name: Build wheel "${{ matrix.package[0] }}"

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      ### Installation of some build-dependencies

      - name: Build wheel of ${{ matrix.package[0] }}
        run: |
          python -m pip wheel --verbose ${{ matrix.package[1] }}

      - name: Store wheel for use
        uses: actions/upload-artifact@v4
        with:
          name: sasview-wheel-${{ matrix.package[0] }}
          path: |
            ${{ matrix.package[0] }}*whl
          if-no-files-found: ignore

  build-matrix:
    needs: [matrix, builddeps]

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
    env:
      MACOS_DMG_NAME: SasView6-${{ matrix.os }}.dmg
      # Only sign/notarize if the secrets will be available
      SIGN_INSTALLER: ${{ (github.repository == 'SasView/sasview') && 'true' || '' }}
      RELEASE_BRANCH_BUILD: ${{
          (
            (github.event_name == 'push' && contains(github.ref, 'release')) ||
            (github.event_name == 'push' && contains(github.ref, 'tags/v6.1')) ||
            (github.event_name == 'pull_request' && contains(github.base_ref, 'release-6.1'))
          ) && 'true' || ''
        }}

    name: "${{ matrix.job_name }}"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Configuration of this job
        run: |
          echo '${{ toJson(matrix) }}'

      - name: Obtain SasView source from git
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/ci.yml
            **/requirements*.txt

      ### Installation of build-dependencies

      - name: Fetch wheels of sibling projects
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: sasview-wheel-*
          merge-multiple: true

      - name: Install correct versions of sibling projects
        run: |
          python -m pip install dist/*whl

      - name: Install Python dependencies
        if: ${{ ! env.RELEASE_BRANCH_BUILD }}
        run: |
          # Don't try to reinstall sibling packages if already at right version
          # Comment out the 'grep' below when not needed
          cp  build_tools/requirements.txt build_tools/tmp.txt
          grep -v -e sasdata -e sasmodels < build_tools/requirements.txt > build_tools/tmp.txt
          python -m pip install -r build_tools/tmp.txt -r build_tools/requirements-dev.txt

      ### For pull_requests with the release branch as the base -or- branches with the name *release*

      - name: Install Python dependencies for release branches
        if: ${{ env.RELEASE_BRANCH_BUILD }}
        run: |
          python -m pip install --no-deps -r build_tools/requirements-release-${{ matrix.os }}.txt

      ### Actual building of sasview

      - name: Build sasview
        run: |
          python -m build --no-isolation --sdist --wheel

      - name: Install sasview wheel
        run: |
          python -m pip install --no-deps dist/sasview*whl

      ### Run tests (if enabled)

      - name: Install test dependencies
        if: ${{ matrix.tests }}
        run: |
          python -m pip install -r build_tools/requirements-test.txt
          python build_tools/get_external_dependencies.py

      - name: Test with pytest
        if: ${{ matrix.tests }}
        env:
          PYOPENCL_COMPILER_OUTPUT: 1
        run: |
          python -m pytest -v -s test

      ### Build the installer (if enabled)

      - name: Install utilities to build installer
        if: ${{ matrix.installer }}
        run: |
          python -m pip install pyinstaller

      ### Document the build environment

      - name: Python package version list
        run: |
          python -m pip freeze

      - name: Build sasview with pyinstaller
        if: ${{ matrix.installer }}
        run: |
          cd installers
          rm -rf build/ dist/
          mkdir -p dist
          pyinstaller sasview.spec
          cd dist
          # the following builds a symlink farm in the package; it should
          # not be necessary, but without it, there will be lots of errors
          # about .so not found under linux.
          command -v ldconfig >/dev/null 2>&1 && ldconfig -n sasview
          tar zcf sasview-pyinstaller-dist.tar.gz sasview

      - name: Collect a debug tarball of the installer package
        if: ${{ matrix.installer }}
        uses: actions/upload-artifact@v4
        with:
          name: Debug-SasView-Installer-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            installers/dist/sasview-pyinstaller-dist.tar.gz
          if-no-files-found: ignore

      - name: Build sasview installer with INNO (Windows)
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') }}
        run: |
          iscc installers/installer.iss
          mv installers/Output/setupSasView.exe installers/dist

      - name: List files in dist
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') }}
        run: |
            ls -l dist

      - name: List files in current directory
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') }}
        run: |
            ls -l

      - name: List files in installers directory
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') }}
        run: |
            ls -l installers
            ls -l C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\smtools-windows-x64\\

      - name: Install DigiCert Client tools from Github Custom Actions marketplace
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') && env.SIGN_INSTALLER }}
        uses: digicert/ssm-code-signing@v1.0.1

      - name: Set up certificate
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') && env.SIGN_INSTALLER }}
        run: |
          echo "${{ secrets.WINDOZE_CERT_DATA }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set variables
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') && env.SIGN_INSTALLER }}
        id: variables
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "SM_HOST=${{ secrets.KEYLOCKER_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.KEYLOCKER_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.WINDOZE_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      - name: Signing using keypair alias
        if: ${{ matrix.installer && startsWith(matrix.os, 'windows') && env.SIGN_INSTALLER }}
        run: |
           smctl sign --keypair-alias ${{ secrets.KEYLOCKER_KEYPAIR_ALIAS }} --input installers/Output/setupSasView.exe --config-file "C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\smtools-windows-x64\\pkcs11properties.cfg"
        shell: cmd

      - name: Publish installer package
        if: ${{ matrix.installer }}
        uses: actions/upload-artifact@v4
        with:
          name: SasView-Installer-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            installers/dist/setupSasView.exe
            installers/dist/SasView6-macos-13.dmg
            installers/dist/SasView6-macos-latest.dmg
            installers/dist/SasView6.tar.gz
          if-no-files-found: ignore
